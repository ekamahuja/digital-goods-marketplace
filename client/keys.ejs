<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mange Keys</title>
    <link rel="stylesheet" href="./assets/css/bootstrap.min.css">
    <link rel="stylesheet" href="./assets/css/all.min.css">
    <link rel="stylesheet" href="./assets/css/animate.css">
    <link rel="stylesheet" href="./assets/css/nice-select.css">
    <link rel="stylesheet" href="./assets/css/owl.min.css">
    <link rel="stylesheet" href="./assets/css/jquery-ui.min.css">
    <link rel="stylesheet" href="./assets/css/magnific-popup.css">
    <link rel="stylesheet" href="./assets/css/flaticon.css">
    <link rel="stylesheet" href="./assets/css/main.css">
    <link rel="stylesheet" href="./assets/css/admin.css">
    <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/js-toastr@1.1.1/toast.css">
    <link rel="shortcut icon" href="assets/images/favicon.png" type="image/x-icon">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/css/all.min.css" crossorigin="anonymous" referrerpolicy="no-referrer" />
</head>
<body>
    <!--============= ScrollToTop Section Starts Here =============-->
    <div class="preloader">
        <div class="preloader-inner">
            <div class="preloader-icon">
                <span></span>
                <span></span>
            </div>
        </div>
    </div>
    <a href="#0" class="scrollToTop"><i class="fas fa-angle-up"></i></a>
    <div class="overlay"></div>
    <!--============= ScrollToTop Section Ends Here =============-->

    <!--============= NavBar Section Starts Here =============-->
    <header class="header-section inner-header">
        <div class="container">
            <div class="header-wrapper">
                <div class="logo">
                    <a href="/">
                        <p class="logo-txt-upgrade-page">UPGRADER.PW</p>
                    </a>
                </div>
                <ul class="menu">
                    <li>
                        <a href="/admin">Dashboard</a>
                    </li>
                    <li>
                        <a href="/admin/keys">Keys</a>
                    </li>
                    <li>
                        <a href="/admin/stocks">Stocks</a>
                    </li>
                    <li>
                        <a href="/api/auth/logout">Log out</a>
                    </li>
                </ul>
                <div class="header-bar d-lg-none">
                    <span></span>
                    <span></span> 
                    <span></span>
                </div>
            </div>
        </div>
    </header>
    <!--============= NavBar Section Ends Here =============-->

     <!--============= Header Section Starts Here =============-->
     <section class="page-header bg_img" data-background="./assets/images/page-header.png">
        <div class="bottom-shape d-none d-md-block">
            <img src="./assets/css/img/page-header.png" alt="css">
        </div>
        <div class="container">
            <div class="page-header-content cl-white">
                <h2 class="title">Keys</h2>
                <ul class="breadcrumb">
                    <li>
                        <a href="/admin">Admin</a>
                    </li>
                    <li>
                        Mange Keys
                    </li>
                </ul>
            </div>
        </div>
    </section>
    <!--============= Header Section Ends Here =============-->


    <!--============= Stats Section Starts Here =============-->
    <div class="feature-section padding-top padding-bottom">
        <div class="container">
            <div class="owl-theme owl-carousel feature-item-2-slider mb--50">
                <div class="feature-item-2">
                    <div class="feature-thumb">
                        <img src="./assets/images/feature/featurei1.png" alt="feature">
                    </div>
                    <div class="feature-content">
                        <h4 class="title">Keys</h4>
                        <p><%- totalKeys %></p>
                    </div>
                </div>
                <div class="feature-item-2">
                    <div class="feature-thumb">
                        <img src="./assets/images/feature/featurei2.png" alt="feature">
                    </div>
                    <div class="feature-content">
                        <h4 class="title">Countries</h4>
                        <p><%- totalCountries %></p>
                    </div>
                </div>
                <div class="feature-item-2">
                    <div class="feature-thumb">
                        <img src="./assets/images/feature/featurei3.png" alt="feature">
                    </div>
                    <div class="feature-content">
                        <h4 class="title">Stock</h4>
                        <p><%- totalStock %></p>
                    </div>
                </div>
                <div class="feature-item-2">
                    <div class="feature-thumb">
                        <img src="./assets/images/feature/featurei3.png" alt="feature">
                    </div>
                    <div class="feature-content">
                        <h4 class="title">Sellix Orders</h4>
                        <p>Integration Pending</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!--============= Stats Section Ends Here =============-->



    <!--============= Mange Keys Section Ends Here =============-->
    <div class="mange-country padding-bottom">
        <h3 class="mange-title">Mange Keys</h3>
        <div class="country-options">
            <button type="button" id="keys-generate-modal" class="btn-one">Generate Keys</button>
            <button type="button" id="keys-search-modal" class="btn-two">Search Key</button>
            <button type="button" id="keys-unlock-modal" class="btn-three">Unlock Key</button>
            <button type="button" id="keys-change-email-modal" class="btn-four">Change email</button>
        </div>
    </div>
    <!--============= Mange Keys Section Ends Here =============-->

    <!--============= Modals Section Starts Here =============-->

    <!-- Generate Key Modal -->
    <div id="generateKeys-modal" class="modal">
        <!-- Modal Content -->
        <div id="generateKeys-modal-content" class="modal-content">
            <!-- <span class="close">&times;</span> -->
            <h5 class="modal-heading" id="generate-key-heading">Generate Keys</h5>
            <div id="generate-keys-body" class="no-scroll"> 
                <div class="inputGroup">
                    <label for="keyPrefix">Key Prefix</label>
                    <select class="key-select" name="keyPrefix" id="keys-prefix">
                        <option value="not-selected" disabled selected>Select Key Prefix</option>
                        <option value="UPGRADERPW">UPGRADERPW-XXXX-XXXX-XXXX-XXXX</option>
                        <option value="KEY">KEY-XXXX-XXXX-XXXX-XXXX</option>
                        <option value="STAFF">STAFF-XXXX-XXXX-XXXX</option>
                        <option value="GIFT">GIFT-XXXX-XXXX-XXXX-XXXX</option>
                    </select>
                </div>
                <div class="inputGroup">
                    <label for="keyType">Type of Key</label>
                    <select class="key-select" name="keyType" id="keys-type">
                        <option value="not-selected" disabled selected>Select Key Type</option>
                        <option value="onetime">One Time (No Warranty)</option>
                        <option value="lifetime">Lifetime (Normal Warranty)</option>
                        <option value="unlimited">Unlimited (Never Gets Locked)</option>
                        <option value="reseller" disabled>Reseller (Comming Soon)</option>
                        <option value="admin" disabled>Admin (Comming Soon)</option>
                    </select>
                </div>
                <div class="inputGroup">
                    <label for="keyGenerate">Number of Keys to Generate</label>
                    <input type="number" min="1" max="1000" name="keyGenerate" id="keys-generate" class="form-control keys-input">
                </div>
                <button type="button" class="confirm-btn" id="generateKeys-confirm">Generate</button>
            </div>
        </div>
    </div>

    <!-- Search Key Modal -->
    <div id="searchKeys-modal" class="modal">
        <!-- Modal Content -->
        <div id="searchKeys-modal-content" class="modal-content">
            <!-- <span class="close">&times;</span> -->
            <h5 class="modal-heading" id="search-key-heading">Search Key</h5>
            <p id="searchKeyHeading">Searching key will grab all data stored including the key info itself as well as it's upgrade data</p>
            <div id="search-keys-body" class="no-scroll"> 
                <div class="inputGroup">
                    <label for="keySearch">Key</label>
                    <input type="text"  name="keySearch" id="keys-search" class="form-control keys-input">
                </div>
                <button type="button" class="confirm-btn" id="searchKeys-confirm">Search</button>
            </div>
            <div class="keyinfo-content" id="keyinfo-data">
                <p class="keyinfo-info">Key: <span id="dataKeyInfo-key"></span></p>
                <p class="keyinfo-info">Current Email: <span id="dataKeyInfo-email"></span></p>
                <p class="keyinfo-info">Used: <span id="dataKeyInfo-used"></span></p>
                <p class="keyinfo-info">Type: <span id="dataKeyInfo-type"></span></p>
                <p class="keyinfo-info">Current Replacements: <span id="dataKeyInfo-currentReplacements"></span></p>
                <p class="keyinfo-info">Total Replacements: <span id="dataKeyInfo-totalRepalcements"></span></p>
            </div>
        </div>
    </div>

    <!-- Unlock Key -->
        <div id="unlockKeys-modal" class="modal">
        <!-- Modal Content -->
        <div id="unlockKeys-modal-content" class="modal-content">
            <!-- <span class="close">&times;</span> -->
            <h5 class="modal-heading" id="search-key-heading">Unlock Key</h5>
            <!-- <p id="unlockKeyHeading">If the key is locked - this will unlock it</p> -->
            <div id="unlock-keys-body" class="no-scroll"> 
                <div class="inputGroup">
                    <label for="keyUnlock">Key</label>
                    <input type="text"  name="keyUnlock" id="keys-unlock" class="form-control keys-input">
                </div>
                <button type="button" class="confirm-btn" id="unlockKeys-confirm">Unlock</button>
            </div>
        </div>
    </div>

    <!-- Unlock Key -->
    <div id="changeEmail-modal" class="modal">
        <!-- Modal Content -->
        <div id="changeEmail-modal-content" class="modal-content">
            <!-- <span class="close">&times;</span> -->
            <h5 class="modal-heading" id="change-email-heading">Update Email on Key</h5>
            <!-- <p id="unlockKeyHeading">If the key is locked - this will unlock it</p> -->
            <div id="change-email-body" class="no-scroll"> 
                <div class="inputGroup">
                    <label for="changeEmailKey">Key</label>
                    <input type="text"  name="changeEmailKey" id="change-email-key" class="form-control keys-input">
                </div>
                <div class="inputGroup">
                    <label for="changeEmailEmail">New Email</label>
                    <input type="text"  name="changeEmailEmail" id="change-email-email" class="form-control keys-input">
                </div>
                <button type="button" class="confirm-btn" id="changeEmail-confirm">Update Email</button>
            </div>
        </div>
    </div>

    <!--============= Modals Section Ends Here =============-->

    
    <script>
        let generatedKeys;

        document.querySelector('#keys-generate-modal').addEventListener('click', function() {
            document.querySelector('#generateKeys-modal').style.display = 'block';
        })        

        document.querySelector("#keys-search-modal").addEventListener("click", () => {
            // toastr.message("Comming soon - remind qwerty", 'info', 3000)
            document.querySelector('#searchKeys-modal').style.display = 'block';
        })

        document.querySelector("#keys-unlock-modal").addEventListener('click', async () => {
            document.querySelector("#unlockKeys-modal").style.display = 'block'
        })

        document.querySelector("#keys-change-email-modal").addEventListener('click', async () => {
            document.querySelector("#changeEmail-modal").style.display = 'block'
        })

        window.onclick = function(event) {
            if (event.target == document.querySelector("#generateKeys-modal")) {
                document.querySelector("#generateKeys-modal").style.display = 'none'
            }

            if (event.target == document.querySelector("#searchKeys-modal")) {
                document.querySelector("#searchKeys-modal").style.display = 'none'
            }

            if (event.target == document.querySelector("#unlockKeys-modal")) {
                document.querySelector("#unlockKeys-modal").style.display = 'none'
            }

            if (event.target == document.querySelector("#changeEmail-modal")) {
                document.querySelector("#changeEmail-modal").style.display = 'none'
            }
        }

        

        document.querySelector('#generateKeys-confirm').addEventListener('click', async () => {
            try {
                const generateKeyBtn = document.querySelector("#generateKeys-confirm")
                const keyPrefix = document.querySelector('#keys-prefix').value
                const keyType = document.querySelector('#keys-type').value
                const numberOfKeys = document.querySelector('#keys-generate').value

                generateKeyBtn.disabled
                generateKeyBtn.innerHTML = '<i class="fas fa-circle-notch fa-spin"></i> Generating...'

                if (keyPrefix == "not-selected" || keyType == "not-selected") {
                    generateKeyBtn.disabled = false
                    generateKeyBtn.innerHTML = "Generate"
                    return toastr.message('Please select the key prefix and key type', 'error', 3000)
                }
                    
                if (!numberOfKeys.length) {
                    generateKeyBtn.disabled = false
                    generateKeyBtn.innerHTML = "Generate"
                    return toastr.message('Please make sure the number of keys is entered correctly', 'error', 3000)
                } 


                if (Number(numberOfKeys) > 1000) {
                    generateKeyBtn.disabled = false
                    generateKeyBtn.innerHTML = "Generate"
                    return toastr.message('You cannot generate more than 1000 keys at a time', 'error', 3000)
                }
                

                const params = {
                    prefix: keyPrefix,
                    type: keyType,
                    amount: Number(numberOfKeys)
                }

                const options = {
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    method: "POST",
                    body: JSON.stringify(params)
                }

                const request = await fetch("http://localhost:12345/api/keys", options)
                const response = await request.json()

                toastr.message(response.message, (response.success) ? 'success' : 'error', 5000)

                if (response.success) {
                    const generateKeyBody = document.querySelector('#generate-keys-body')
                    generateKeyBody.classList.remove('no-scroll')
                    document.querySelector("#generate-key-heading").innerText = "Generated Keys"
                    generateKeyBody.innerHTML = '<ul id="generated-keys-list"></ul'
                    
                    for (let i = 0; i < response.keys.length; i++) {
                        const line = document.createElement("li")
                        line.innerHTML = response.keys[i]
                        document.querySelector("#generated-keys-list").appendChild(line)
                    }

                    const generatedKeyFooter = document.createElement("div")
                    generatedKeyFooter.id = "generate-key-footer"
                    document.querySelector("#generateKeys-modal-content").appendChild(generatedKeyFooter)

                    generatedKeys = response.keys

                    generatedKeyFooter.innerHTML = `<button onclick="copyGeneratedKeys()" class="green-btn">Copy</button>`
                }
            } catch(err) {
                toastr.message(err.message, 'error', 5000)
                generateKeyBtn.disabled = false
                generateKeyBtn.innerHTML = "Generate"
            }
        })


        async function copyGeneratedKeys() {
            generatedKeys = generatedKeys.join('\n')
            navigator.clipboard.writeText(generatedKeys)
            toastr.message("Keys successfully copied", "success", 900)
            setTimeout(function() {
                location.reload()
            }, 1000)
        }



        document.querySelector("#searchKeys-confirm").addEventListener("click", async () => {
            try {
                const searchKeyBtn = document.querySelector("#searchKeys-confirm")
                const keySearchInput = document.querySelector("#keys-search").value

                searchKeyBtn.disabled
                searchKeyBtn.innerHTML = '<i class="fas fa-circle-notch fa-spin"></i> Fetching...'

                const request = await fetch(`http://localhost:12345/api/key?key=${keySearchInput}`)
                const response = await request.json()

                const {key, email, used, type, replacementsClaimed, totalReplacementsClaimed, upgradeData} = response.keyData
                console.log(response)

                toastr.message(response.message, (response.success) ? 'success' : 'error', 5000)

                if (!response.success) {
                    searchKeyBtn.disabled = false
                    searchKeyBtn.innerHTML = 'Search'
                    return
                }

                document.querySelector("#search-keys-body").style.display = 'none'
                document.querySelector("#search-key-heading").innerHTML = key
                document.querySelector("#searchKeyHeading").style.display = 'none'
                document.querySelector("#keyinfo-data").style.display = 'block';
                document.querySelector("#dataKeyInfo-key").innerHTML = key
                document.querySelector("#dataKeyInfo-email").innerHTML = email
                document.querySelector("#dataKeyInfo-used").innerHTML = (used) ? "Yes" : "No"
                document.querySelector("#dataKeyInfo-type").innerHTML = type.charAt(0).toUpperCase() + type.slice(1)
                document.querySelector("#dataKeyInfo-currentReplacements").innerHTML = replacementsClaimed
                document.querySelector("#dataKeyInfo-totalRepalcements").innerHTML = totalReplacementsClaimed

                upgradeData.upgrades.forEach((upgrade) => {
                    const upgradeDataDiv = document.createElement("div")
                    upgradeDataDiv.classList.add("keyinfo-upgrades")
                    upgradeDataDiv.innerHTML = `<p>Upgrade Link: <a href="${upgrade.inviteLink}">Invite Link</a></p><p>Upgrade Address: ${upgrade.inviteAddress}</p><p>Upgrade Country: ${upgrade.inviteCountry}</p><p>User Email: ${upgrade.userEmail}</p><p>User IP: ${upgrade.userIp}</p>`
                    document.querySelector("#keyinfo-data").appendChild(upgradeDataDiv)
                })
                

                
            } catch(err) {
                toastr.message(err.message, 'error', 5000)
            }
        })

        

        document.querySelector("#unlockKeys-confirm").addEventListener('click', async () => {
            const confirmUnlockKeyBtn = document.querySelector("#unlockKeys-confirm")
            const confirmUnlockKeyInput = document.querySelector("#keys-unlock")

            confirmUnlockKeyInput.disabled = true
            confirmUnlockKeyBtn.disabled = true
            confirmUnlockKeyBtn.innerHTML = '<i class="fas fa-circle-notch fa-spin"></i> Unlocking...'

            const request = await fetch(`http://localhost:12345/api/unlockkey?key=${(confirmUnlockKeyInput.value).toUpperCase()}`)
            const response = await request.json()

            toastr.message(response.message, (response.success) ? 'success' : 'error', 5000)

            confirmUnlockKeyInput.disabled = false
            confirmUnlockKeyBtn.disabled = false
            confirmUnlockKeyBtn.innerHTML = 'Unlock'

            if (response.success) {
                confirmUnlockKeyInput.value = ""
            }

        })



        document.querySelector("#changeEmail-confirm").addEventListener("click", async () => {
            try {
                const updateEmailKeyInput = document.querySelector("#change-email-key")
                const updateEmailEmailInput = document.querySelector("#change-email-email")
                const updateEmailBtn = document.querySelector("#changeEmail-confirm")

                updateEmailEmailInput.disabled
                updateEmailKeyInput.disabled              
                updateEmailBtn.disabled
                updateEmailBtn.innerHTML = '<i class="fas fa-circle-notch fa-spin"></i> Updating...'

                const request = await fetch(`http://localhost:12345/api/updateemail?key=${updateEmailKeyInput.value.toUpperCase()}&email=${updateEmailEmailInput.value}`)
                const response = await request.json()

                toastr.message(response.message, (response.success) ? "success" : "error", 5000)

                updateEmailEmailInput.disabled = false
                updateEmailKeyInput.disabled = false
                updateEmailBtn.disabled = false
                updateEmailBtn.innerHTML = 'Update Email'


                if (response.success) {
                    updateEmailEmailInput.value = ""
                    updateEmailKeyInput.value = ""
                }
            } catch(err) {
                toastr.message(err.message, 'error', 5000)
            }
        })


    </script>




    
    <script src="./assets/js/jquery-3.3.1.min.js"></script>
    <script src="./assets/js/modernizr-3.6.0.min.js"></script>
    <script src="./assets/js/plugins.js"></script>
    <script src="./assets/js/bootstrap.min.js"></script>
    <script src="./assets/js/magnific-popup.min.js"></script>
    <script src="./assets/js/jquery-ui.min.js"></script>
    <script src="./assets/js/wow.min.js"></script>
    <script src="./assets/js/waypoints.js"></script>
    <script src="./assets/js/nice-select.js"></script>
    <script src="./assets/js/owl.min.js"></script>
    <script src="./assets/js/counterup.min.js"></script>
    <script src="./assets/js/paroller.js"></script>
    <script src="./assets/js/countdown.js"></script>
    <script src="./assets/js/main.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/js-toastr@1.1.1/toast.min.js"></script>
</body>
</html>